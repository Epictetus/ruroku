{"name":"Ruroku","body":"# Ruroku\r\n\r\nThe Ruby client for Heroku API, built on top of official `heroku.rb`\r\ngem.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'ruroku'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install ruroku\r\n\r\n## Usage\r\n\r\nStart by initiating a connection with Heroku API:\r\n\r\n    heroku = Ruroku::API.new api_key: YOUR_HEROKU_API_KEY\r\n\r\n(You can leave out `:api_key` if `ENV['HEROKU_API_KEY']` is set\r\ninstead.)\r\n\r\nNow you can interact with Heroku API using Ruroku.\r\n\r\n### Apps\r\n\r\nEach API object has apps associated with the Heroku account. You can\r\naccess an Array of all the associated apps with `#apps`:\r\n\r\n    heroku.apps\r\n    # => [#<App>, #<App>, #<App>]\r\n    \r\n    app = heroku.apps.first\r\n\r\nYou then can get additional app info:\r\n\r\n    app.id\r\n    app.name\r\n    app.stack\r\n    app.git_url\r\n    app.slug_size\r\n    app.repo_size\r\n    app.dynos\r\n    apps.workers\r\n    # and a few less interesting ones\r\n\r\nMaintenance mode can be turned on and off:\r\n\r\n    app.maintenance!\r\n    app.no_maintenance!\r\n\r\n### Addons\r\n\r\nTo get a list of addons used by a particular app:\r\n\r\n    addons = app.addons\r\n    # => [#<Addon>, #<Addon>, #<Addon>]\r\n    \r\n    addon = app.addons.first\r\n\r\nIt's possible perform several actions on addon collections:\r\n\r\n#### Add an addon\r\n\r\n    addons.add 'addon:plan'\r\n\r\n#### Remove an addon\r\n\r\n    addons.delete 'addon-name'\r\n\r\n#### Upgrade an addon\r\n\r\n    addons.upgrade 'addon:new-plan'\r\n\r\nEach addon object is associated with the application. You can delete\r\naddons from the app by calling `#delete` method on the addon object as\r\nwell:\r\n\r\n    addon.delete!\r\n\r\n### Collaborators\r\n\r\nList all app collaborators:\r\n\r\n    collaborators = app.collaborators\r\n\r\n#### Add a collaborator\r\n\r\n    collaborators.add 'email@me.com'\r\n\r\n#### Remove a collaborator\r\n\r\n    collaborators.delete 'email@me.com'\r\n\r\nor\r\n\r\n    collaborator.delete!\r\n\r\n### Config variables\r\n\r\nList all app config vars:\r\n\r\n    config_vars = app.config_vars\r\n\r\nAdd or delete a config var:\r\n\r\n    config_vars.add 'KEY' => 'value'\r\n    config_vars.delete 'KEY'\r\n\r\nor:\r\n\r\n    config_var.delete!\r\n\r\nThey can also be updated like that:\r\n\r\n    config_var.value = 'new value'\r\n\r\nAnd it'll instantly get updated.\r\n\r\n### Domains\r\n\r\nAccess domains used by the application:\r\n\r\n    domains = app.domains\r\n\r\nSame as with other collection objects, they can be added or deleted:\r\n\r\n    domains.add 'domain.com'\r\n    domains.delete 'domain.com'\r\n\r\nor:\r\n\r\n    domain.delete!\r\n\r\n### Processes\r\n\r\nGet current application processes:\r\n\r\n    processes = app.processes\r\n\r\nYou can also run, restart, scale, and stop method collections:\r\n\r\n    processes.run 'rake evolve'\r\n    processes.restart\r\n    process.scale 'worker', 10\r\n    process.stop 'ps' => 'run.1'\r\n    process.stop 'type' => 'worker'\r\n\r\n### Releases\r\n\r\nList all app releases:\r\n\r\n    releases = app.releases\r\n\r\nAnd rollback to any release:\r\n\r\n    releases.rollback 'v1'\r\n\r\n## Mock\r\n\r\nFor practice or testing you can also use a simulated Heroku:\r\n\r\n    require 'ruroku'\r\n\r\n    heroku = Ruroku::API.new api_key: API_KEY, mock: true\r\n\r\nAfter that commands should still behave the same, but they will only modify some local data instead of updating the state of things on Heroku.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## License\r\n\r\nReleased under the MIT license.\r\n","tagline":"The Ruby client for Heroku API","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}